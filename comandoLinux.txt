cd: se abre un carpeta nueva 
cd ..: se devuelve a la carpeta anterior 
mkdir: crea carpetas 
ls: lista los archivos que hay por defecto 
ls -al: todos los archivos en una lista 
ls -a solo muestra un grupo de archivos 
clear: limpia la consola (ctrl+l)
cat: abre los archivos en consola 

<-----------creando el repositorio------------->

git init: se agrega git al proyecto 
git status: muestra si el archivo está en memoria  o no 
git add "nombre del archivo": trackea el archuvi
git rm --cached: borra lo archivos que estan en memoria 

<!----.------------------------- antes de crear el commit hay que iniciar con email y name----------------->

git config: todas las configuraciones 
git --list: configuracion por defecto 
git --list --show--origin: se pueden las configuraciones guardadas 
git config --global user.name "nombre"
git config --global user.email "email"

git commit -m "comentario"

<-------------------en terotia------------->
al inciar el git estoy agregandolo a mi trabajo working , al ejecutar el comando add me está 
separando un espacio en memoria "staging" al ejectar el commit ya estoy guardando mi archivo
en la rama "branch".

<!--- --------------- siempre para agregar un commit hay que empezar desde <<git add>>>----------------------------------->

code "nombre del archivo": abre el archivo en VS Code

<------- historial de todos los cambias que se le han realizado al archivo------------>

git log "nombre del archivo": se verifica el historial del archivo 
git show "nombre del archivo": los cambios que se le han hecho al docuento.
git log "nombre del archivo": se verifica el historial del archivo 
git show "nombre del archivo": los cambios que se le han hecho al docuento.7

pdw: hace el recordatorio de la direccion  en la que nos encontramos

<!-----------------------------para volver a las versiones anteriores----------------------------------->

git reset  dbf72997d1248472824bcf3809314fcec23704fb --hard:  este borra todas leas versiones y solo queda la elejida 
git reset  dbf72997d1248472824bcf3809314fcec23704fb --soft:  vuelve a la version anterior pero conservasevando todas las veriones 
git diff:  muestra los cambios que se tienen guardados en memoria, sin hacer el commit vs los cambios que tiene aun sin trackear
git log --stat: permite ver los cambios espesificos des pues de cada commit 
git chekout dbf72997d1248472824bcf3809314fcec23704fb "nombre del archivo que se quiere de regreso": este comando nos devuelve al commmit deseado, pero hay que tener cuidado porque si se realiza un commit se perderan las veriones posteriores
git chekout master "nombre del archivo" ya me regresa al ultimo commit sin perder nada de la informacion 
git rm --cached: Elimina los archivos del área de Staging y del próximo commit pero los mantiene en nuestro disco duro.
git rm --force: Elimina los archivos de Git y del disco duro. Git siempre guarda todo.

<!---------------crear nuevas ramas------------------------------------------->

git brach "nombre": este crea nuestra nueva ramas del proyecto 
git checkout "nombre de la rama": cambia a la segunda rama y apartir de aqui los commit guardados solo se veran en esta rama; la rama master o principal quedará quieta en su última versión 


 
